package bills

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"regexp"
	"time"

	"github.com/gefion-tech/tg-exchanger-bot/internal/app/errors"
	"github.com/gefion-tech/tg-exchanger-bot/internal/app/static"
	"github.com/gefion-tech/tg-exchanger-bot/internal/models"
	"github.com/gefion-tech/tg-exchanger-bot/internal/services/api"
	"github.com/gefion-tech/tg-exchanger-bot/internal/tools"
	validation "github.com/go-ozzo/ozzo-validation"
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api"
	"github.com/valyala/fasthttp"

	_ "image/jpeg"
)

func (m *ModBills) AddNewBillStepFour(ctx context.Context, update tgbotapi.Update, action *models.UserAction) error {
	if update.Message.Photo != nil {
		if len(*update.Message.Photo) < 3 {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ :(\n–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∑–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞.")
			m.bAPI.Send(msg)
			return nil
		}

		// –°–∫–∞—á–∏–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
		img, err := m.download(ctx, update)
		if err != nil {
			return err
		}

		if img == "" {
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ :(")
			m.bAPI.Send(msg)
			return nil
		}

		// –í—ã–∑—ã–≤–∞—é —á–µ—Ä–µ–∑ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ–ª—å –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
		r := api.Retry(m.sAPI.Notification().Create, 3, time.Second)
		resp, err := r(ctx, map[string]interface{}{
			"type": action.ActionType,
			"meta_data": map[string]interface{}{
				"code":      action.MetaData["Code"],
				"user_card": action.MetaData["Card"],
				"img_path":  img,
			},
			"user": map[string]interface{}{
				"chat_id":  action.User.ChatID,
				"username": action.User.Username,
			},
		})
		if err != nil {
			return errors.ErrBotServerNoAnswer
		}
		defer fasthttp.ReleaseResponse(resp)

		switch resp.StatusCode() {
		case http.StatusCreated:
			if err := m.redis.UserActions().Delete(update.Message.Chat.ID); err != nil {
				return err
			}
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n\n–ü–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
			msg.ParseMode = tgbotapi.ModeMarkdown
			msg.ReplyMarkup = m.kbd.Base().BaseStartReplyMarkup()
			m.bAPI.Send(msg)
		default:
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ—Ö–æ–∂–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É.")
			m.bAPI.Send(msg)
			return nil
		}

		return nil
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–•–º, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é...")
	m.bAPI.Send(msg)
	return nil
}

// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ —Ç—É –∫–∞—Ä—Ç—É –∏ —Ö–æ—á–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥
func (m *ModBills) AddNewBillStepThreeInCorrect(ctx context.Context, update tgbotapi.Update, action *models.UserAction) error {
	action.MetaData = nil
	action.Step--
	if err := m.redis.UserActions().New(update.CallbackQuery.Message.Chat.ID, action); err != nil {
		return err
	}

	return m.AddNewBillStepOne(ctx, update)
}

func (m *ModBills) AddNewBillStepThreeCorrect(ctx context.Context, update tgbotapi.Update, action *models.UserAction) error {
	c := tools.VerificationCode(false)
	action.MetaData["Code"] = c
	action.Step++

	if err := m.redis.UserActions().New(update.CallbackQuery.Message.Chat.ID, action); err != nil {
		return err
	}

	rMsg := tgbotapi.NewDeleteMessage(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Message.MessageID)
	m.bAPI.Send(rMsg)

	text := fmt.Sprintf("–•–æ—Ä–æ—à–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Ñ–æ—Ç–æ —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n–¢—É—Ç —Ç–µ–∫—Å—Ç –æ —Ç–æ–º –∫–∞–∫ –Ω—É–∂–Ω–æ —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n\n–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: *%d*", c)
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, text)
	msg.ParseMode = tgbotapi.ModeMarkdown
	m.bAPI.Send(msg)
	return nil
}

func (m *ModBills) AddNewBillStepTwo(ctx context.Context, update tgbotapi.Update, action *models.UserAction) error {
	// –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
	pattern := `^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\d{3})\d{11})$`
	if err := validation.Validate(update.Message.Text, validation.Required, validation.Match(regexp.MustCompile(pattern))); err != nil {
		msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ‚ùå")
		m.bAPI.Send(msg)
		return nil
	}

	// –û–±–Ω–æ–≤–ª—è—é –∑–∞–ø–∏—Å—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
	action.MetaData = map[string]interface{}{"Card": update.Message.Text}
	action.Step++
	if err := m.redis.UserActions().New(update.Message.Chat.ID, action); err != nil {
		return err
	}

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, fmt.Sprintf("–î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç—É `%s`.\n–í—Å–µ –≤–µ—Ä–Ω–æ?", update.Message.Text))
	msg.ParseMode = tgbotapi.ModeMarkdown
	msg.ReplyMarkup = m.kbd.Bill().Card–°orrectnessConfirmation()
	m.bAPI.Send(msg)
	return nil
}

// –ó–∞–ø—Ä–æ—Å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã
func (m *ModBills) AddNewBillStepOne(ctx context.Context, update tgbotapi.Update) error {
	// –°–æ–∑–¥–∞–Ω–∏–µ –≤ redis –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
	if err := m.redis.UserActions().New(update.CallbackQuery.Message.Chat.ID, &models.UserAction{
		ActionType: static.BOT__A__BL__ADD_NEW_BILL,
		Step:       1,
		User: struct {
			ChatID   int
			Username string
		}{
			ChatID:   int(update.CallbackQuery.Message.Chat.ID),
			Username: update.CallbackQuery.Message.Chat.UserName,
		},
	}); err != nil {
		return err
	}

	rMsg := tgbotapi.NewDeleteMessage(update.CallbackQuery.Message.Chat.ID, update.CallbackQuery.Message.MessageID)
	m.bAPI.Send(rMsg)

	msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–•–æ—Ä–æ—à–æ, –ø—Ä–∏—à–ª–∏ –º–Ω–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å üëá")
	msg.ReplyMarkup = m.kbd.Base().CancelAction()
	m.bAPI.Send(msg)
	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
// –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
// –° —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ telegram
func (m *ModBills) download(ctx context.Context, update tgbotapi.Update) (string, error) {
	i := 1
	for _, f := range *update.Message.Photo {
		if i == len(*update.Message.Photo) {
			// –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ API telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
			r := api.Retry(m.sAPI.Telegram().GetFileDate, 3, time.Second)
			resp, err := r(ctx, map[string]interface{}{"file_id": f.FileID})
			if err != nil {
				return "", errors.ErrBotServerNoAnswer
			}
			defer fasthttp.ReleaseResponse(resp)

			switch resp.StatusCode() {
			case http.StatusOK:
				var body map[string]interface{}
				if err := json.Unmarshal(resp.Body(), &body); err != nil {
					return "", err
				}

				res := body["result"].(map[string]interface{})

				// –ü—Ä–æ–≤–µ—Ä—è—é –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–º
				if res["file_size"].(float64)/1000000 > 20 {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü–æ—Ö–æ–∂–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—á–µ–Ω—å —Ç—è–∂–µ–ª—ã–π —Ñ–∞–π–ª, —è –Ω–µ –º–æ–≥—É —Ç–∞–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å.")
					m.bAPI.Send(msg)
					return "", nil
				}

				// –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ API telegram –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
				rD := api.Retry(m.sAPI.Telegram().DownloadFile, 3, time.Second)
				respD, err := rD(ctx, map[string]interface{}{"file_path": res["file_path"]})
				if err != nil {
					return "", errors.ErrBotServerNoAnswer
				}
				defer fasthttp.ReleaseResponse(respD)

				// –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª
				path := fmt.Sprintf("tmp/%s_%s.jpeg", update.Message.Chat.UserName, time.Now().UTC().Format("2006-01-02T15:04:05.00000000"))
				file, err := os.Create(path)
				if err != nil {
					return "", err
				}
				defer file.Close()

				if _, err = io.Copy(file, bytes.NewReader(respD.Body())); err != nil {
					return "", err
				}

				return path, nil
			}
		}
		i++
	}

	return "", nil

}
